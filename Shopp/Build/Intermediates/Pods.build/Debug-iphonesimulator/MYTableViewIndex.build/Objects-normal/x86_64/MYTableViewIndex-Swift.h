// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MYTableViewIndex",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIImage;
@class NSCoder;

/// Use this class for displaying image based items.
SWIFT_CLASS_NAMED("ImageItem")
@interface MYImageItem : UIImageView
@property (nonatomic) UIEdgeInsets contentInset;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol MYIndexItemAttributes;

/// Protocol for customizing index item behavior.
SWIFT_PROTOCOL_NAMED("IndexItem")
@protocol MYIndexItem
/// Returns the size that best fits the specified size.
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Indicates that the closest neighborhood of this item can not be truncated. The flag is only
/// checked if the receiver is the first or the last item in the index sequence.
/// The method is used to mimic UITableView behavior. E.g, it never truncates items
/// after search item and before # sign.
- (BOOL)blocksEdgeTruncation SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to apply style attributes of table index to the item.
- (void)applyAttributes:(id <MYIndexItemAttributes> _Nonnull)attributes;
@end

@class UIFont;

/// Container for item appearance attributes.
SWIFT_PROTOCOL_NAMED("IndexItemAttributes")
@protocol MYIndexItemAttributes
@property (nonatomic, readonly, strong) UIFont * _Nonnull font;
@end




/// Use this class to get a magnifying glass icon similar to UITableViewIndexSearch.
SWIFT_CLASS_NAMED("SearchItem")
@interface MYSearchItem : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)drawRect:(CGRect)rect;
- (BOOL)blocksEdgeTruncation SWIFT_WARN_UNUSED_RESULT;
@end


/// Use this class for displaying text based items.
SWIFT_CLASS_NAMED("StringItem")
@interface MYStringItem : UILabel
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)blocksEdgeTruncation SWIFT_WARN_UNUSED_RESULT;
- (void)applyAttributes:(id <MYIndexItemAttributes> _Nonnull)attributes;
- (void)tintColorDidChange;
- (void)didMoveToWindow;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol MYTableViewIndexDataSource;
@protocol MYTableViewIndexDelegate;
@class UITouch;
@class UIEvent;

SWIFT_CLASS_NAMED("TableViewIndex")
@interface MYTableViewIndex : UIControl
/// Data source for the table index object. See TableViewIndexDataSource protocol for details.
@property (nonatomic, weak) IBOutlet id <MYTableViewIndexDataSource> _Nullable dataSource;
/// Delegate for the table index object. See TableViewIndexDelegate protocol for details.
@property (nonatomic, weak) IBOutlet id <MYTableViewIndexDelegate> _Nullable delegate;
/// Background view is displayed below the index items and can be customized with any UIView.
/// If not set or set to nil, creates a default view which mimics the system index appearance.
@property (nonatomic, strong) UIView * _Null_unspecified backgroundView;
/// Font for the index view items. If not set, uses a default font which is chosen to
/// match system appearance.
/// Use resetFont to fall back to default font.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Vertical spacing between the items. Equals to 1 point by default to match system appearance.
/// Use resetItemSpacing to fall back to default spacing.
@property (nonatomic) CGFloat itemSpacing;
/// The distance that index items are inset from the enclosing background view. The property
/// doesn’t change the position of index items. Instead, it changes the size of the background view
/// to match the inset. In other words, the background view “wraps” the content. Affects intrinsic
/// content size.
/// Set inset value to CGFloat.max to make the background view fill all the available space.
/// Default value matches the system index appearance.
/// Use resetIndexInset to fall back to default inset.
/// Left and right values are flipped when using right-to-left user interface direction.
@property (nonatomic) UIEdgeInsets indexInset;
/// The distance from the left (or right in case of right-to-left languages) border of the background view
/// for which index items are shifted inside it.
/// The property only affects the position of the index items and doesn’t change the size of the background view.
/// Default value matches the system index appearance.
/// Use resetIndexOffset to fall back to default offset.
@property (nonatomic) UIOffset indexOffset;
/// The list of all items provided by the data source.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull items;
/// Returns a set of items suitable for displaying within the current bounds. If there is not enough space
/// to display all the items provided by the data source, some of them are replaced with a special truncation item.
/// To customize the class of truncation item, use the corresponding TableViewIndexDataSource method.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull displayedItems;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Forces table index to reload its items. This causes table index to discard its current items
/// and refill itself from the data source.
- (void)reloadData;
/// Returns a drawing area for the index items.
- (CGRect)indexRect SWIFT_WARN_UNUSED_RESULT;
/// Returns a drawing area for the background view.
- (CGRect)backgroundRect SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) UISemanticContentAttribute semanticContentAttribute;
/// Resets font to default value to match the system index appearance.
- (void)resetFont;
/// Resets itemSpacing to default value to match the system index appearance.
- (void)resetItemSpacing;
/// Resets indexInset to default value to match the system index appearance.
- (void)resetIndexInset;
/// Resets indexOffset to default value to match the system index appearance.
- (void)resetIndexOffset;
/// Convenience method to reset basic styling to match the system index appearance.
/// This includes background, font, itemSpacing, indexInset and indexOffset.
- (void)resetAppearance;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)accessibilityIncrement;
- (void)accessibilityDecrement;
@end


@interface MYTableViewIndex (SWIFT_EXTENSION(MYTableViewIndex))
- (void)prepareForInterfaceBuilder;
@end

@class UIScrollView;

SWIFT_CLASS_NAMED("TableViewIndexController")
@interface MYTableViewIndexController : NSObject
/// Table index managed by controller.
@property (nonatomic, readonly, strong) MYTableViewIndex * _Nonnull tableViewIndex;
/// Set closure to tune layout of the table index.
@property (nonatomic, copy) void (^ _Nullable layouter)(UIScrollView * _Nonnull, MYTableViewIndex * _Nonnull);
- (nonnull instancetype)initWithScrollView:(UIScrollView * _Nonnull)scrollView OBJC_DESIGNATED_INITIALIZER;
/// Hides or shows the table index. Completion closure is called instantly if animated flag is false.
/// Use alongsideAnimations closure to run additional animations in the same context as the hide/show
/// animation.
- (void)setHidden:(BOOL)hidden animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion alongsideAnimations:(void (^ _Nullable)(void))alongsideAnimations;
- (void)setHidden:(BOOL)hidden animated:(BOOL)animated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("TableViewIndexDataSource")
@protocol MYTableViewIndexDataSource <NSObject>
/// Provides a set of items to display in the table index. The library provides
/// a default set of views tuned for displaying text, images, search indicator and
/// truncation items.
/// You can use any UIView subclass as an item basically, though using UITableView
/// is not recommended :)
/// Check IndexItem protocol for item customization points.
- (NSArray<UIView *> * _Nonnull)indexItemsForTableViewIndex:(MYTableViewIndex * _Nonnull)tableViewIndex SWIFT_WARN_UNUSED_RESULT;
@optional
/// Provides a class for truncation items. Truncation items are useful when there’s not enough
/// space for displaying all the items provided by the data source. When this happens, table
/// index omits some of the items from being displayed and inserts one or more truncation items
/// instead.
/// Table index uses TruncationItem class by default, which is tuned to match the native index
/// appearance.
- (Class _Nonnull)truncationItemClassForTableViewIndex:(MYTableViewIndex * _Nonnull)tableViewIndex SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("TableViewIndexDelegate")
@protocol MYTableViewIndexDelegate <NSObject>
@optional
/// Called as a result of recognizing an index touch. Can be used to scroll table/collection view to
/// a corresponding section.
/// Return true to produce a haptic feedback (iPhone 7 with iOS 10 or later).
- (BOOL)tableViewIndex:(MYTableViewIndex * _Nonnull)tableViewIndex didSelectItem:(UIView * _Nonnull)item atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// Default truncation symbol. Tries to match <code>•</code> symbol appearance used in UITableView.
SWIFT_CLASS_NAMED("TruncationItem")
@interface MYTruncationItem : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)drawRect:(CGRect)rect;
@end








@interface UIView (SWIFT_EXTENSION(MYTableViewIndex)) <MYIndexItem>
- (BOOL)blocksEdgeTruncation SWIFT_WARN_UNUSED_RESULT;
- (void)applyAttributes:(id <MYIndexItemAttributes> _Nonnull)attributes;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
