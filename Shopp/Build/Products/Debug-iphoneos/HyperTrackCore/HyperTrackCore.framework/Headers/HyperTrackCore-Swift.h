// Generated by Apple Swift version 4.2 effective-4.1.50 (swiftlang-1000.0.25.1 clang-1000.10.28.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HyperTrackCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS_NAMED("Config")
@interface HTCoreConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




















/// The HyperTrack Error object. Contains an error type.
SWIFT_CLASS_NAMED("CoreError")
@interface HTCoreError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14HyperTrackCore19CoreLocationManager")
@interface CoreLocationManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLLocationManager;

@interface CoreLocationManager (SWIFT_EXTENSION(HyperTrackCore)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end



enum ServiceType : NSInteger;

SWIFT_PROTOCOL_NAMED("EventUpdatesDelegate")
@protocol HTCoreEventUpdatesDelegate
- (void)didChangeEvent:(NSDictionary<NSString *, id> * _Nonnull)dict serviceType:(enum ServiceType)serviceType;
@end

@protocol HTCoreServiceStatusUpdateDelegate;
@protocol HTCoreServiceLocationUpdateDelegate;

/// This the entry point for the HyperTrack SDK.
/// Initialize and manage the lifecycle of the SDK.
SWIFT_CLASS_NAMED("HyperTrackCore")
@interface HTCore : NSObject
/// Initialize the HyperTrack SDK by calling this method once from <code>didFinishLaunchingWithOptions</code> method in the <code>AppDelegate</code> class of your Application.
/// \param publishableKey A unique String that is used to identify your account with HyperTrack.
///
/// \param completionHandler A callback which takes an optional <code>CoreError</code> as a parameter and returns Void.
/// Use this handler to determine if there were any issues while initializing the SDK.
///
+ (void)initializeWithPublishableKey:(NSString * _Nonnull)publishableKey completionHandler:(void (^ _Nonnull)(HTCoreError * _Nullable))completionHandler;
/// Initialize the HyperTrack SDK by calling this method once from <code>didFinishLaunchingWithOptions</code> method in the <code>AppDelegate</code> class of your Application.
/// \param publishableKey A unique String that is used to identify your account with HyperTrack.
///
/// \param config An optional <code>Config</code> instance which helps in tuning the SDK as per your requirement.
/// In case this parameter is not provided, a default configuration will used.
///
/// \param completionHandler A callback which takes an optional <code>CoreError</code> as a parameter and returns Void.
/// Use this handler to determine if there were any issues while initializing the SDK.
///
+ (void)initializeWithPublishableKey:(NSString * _Nonnull)publishableKey config:(HTCoreConfig * _Nonnull)config completionHandler:(void (^ _Nonnull)(HTCoreError * _Nullable))completionHandler;
/// Initialize the HyperTrack SDK by calling this method once from <code>didFinishLaunchingWithOptions</code> method in the <code>AppDelegate</code> class of your Application.
/// \param publishableKey A unique String that is used to identify your account with HyperTrack.
///
/// \param filePath Path to a JSON or PropertyList file which provides a serialized <code>Config</code> data.
/// Please refer our sample app which has a template for the config file.
///
/// \param completionHandler A callback which takes an optional <code>CoreError</code> as a parameter and returns Void.
/// Use this handler to determine if there were any issues while initializing the SDK.
///
+ (void)initializeWithPublishableKey:(NSString * _Nonnull)publishableKey filePath:(NSString * _Nonnull)filePath completionHandler:(void (^ _Nonnull)(HTCoreError * _Nullable))completionHandler;
/// Returns a Bool indicating the location authorization status of your application.
+ (BOOL)checkLocationPermission SWIFT_WARN_UNUSED_RESULT;
/// Request location permissions from the user.
/// \param completionHandler A callback which takes an optional <code>CoreError</code> as a parameter and returns Void.
/// Use this handler to determine whether the user has provided the required location permissions or not.
///
+ (void)requestLocationPermissionWithCompletionHandler:(void (^ _Nullable)(HTCoreError * _Nullable))completionHandler;
/// Returns a Bool indicating the motion authorization status of your application.
+ (BOOL)checkActivityPermission SWIFT_WARN_UNUSED_RESULT;
/// Request motion permissions from the user.
/// \param completionHandler A callback which takes an optional <code>CoreError</code> as a parameter and returns Void.
/// Use this handler to determine whether the user has provided the required motion permissions or not.
///
+ (void)requestActivityPermissionWithCompletionHandler:(void (^ _Nullable)(HTCoreError * _Nullable))completionHandler;
/// Allows the SDK to resume a previously paused tracking.
/// Call this method when you had previously made a call to <code>pauseTracking()</code> method.
/// While setting up the SDK you don’t need to explicitly call this method.
/// The SDK will automatically start recording data as soon as it receives the required permissions.
+ (void)resumeTracking;
/// Allows the SDK to resume a previously paused tracking.
/// Call this method when you had previously made a call to <code>pauseTracking()</code> method.
/// While setting up the SDK you don’t need to explicitly call this method.
/// The SDK will automatically start recording data as soon as it receives the required permissions.
/// If sdk initialization steps are not completed, it will throw the error.
+ (void)resumeTrackingWithCompletionHandler:(void (^ _Nullable)(HTCoreError * _Nullable))completionHandler;
/// Stops the SDK from listening to user’s movement updates and recording any data.
/// If this method is called, the SDK will not resume movement tracking until <code>resumeTracking()</code> method is called.
+ (void)pauseTracking;
/// Returns a string which is used by HyperTrack to uniquely identify the user.
///
/// returns:
/// A unique identifier.
+ (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// This method is for internal use only.
/// Please do not use this method as it might hamper the data collected by SDK.
+ (void)setDeviceId:(NSString * _Nonnull)id;
/// Determine whether the SDK is tracking the movement of the user.
///
/// returns:
/// Whether user’s movement data is getting tracked or not.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isTracking;)
+ (BOOL)isTracking SWIFT_WARN_UNUSED_RESULT;
/// Determine whether the SDK is tracking the location of the user.
///
/// returns:
/// Whether user’s location data is getting tracked or not.
+ (BOOL)isLocationServiceRunning SWIFT_WARN_UNUSED_RESULT;
/// Determine whether the SDK is tracking the activities of the user.
///
/// returns:
/// Whether user’s motion data is getting tracked or not.
+ (BOOL)isActivityServiceRunning SWIFT_WARN_UNUSED_RESULT;
/// This method is for internal use only.
/// Please do not use this method as it might hamper the data collected by SDK.
+ (void)setServiceStatusUpdatesDelegate:(id <HTCoreServiceStatusUpdateDelegate> _Nonnull)delegate;
/// This method is for internal use only.
/// Please do not use this method as it might hamper the data collected by SDK.
+ (void)setEventUpdatesDelegate:(id <HTCoreEventUpdatesDelegate> _Nullable)delegate serviceType:(enum ServiceType)serviceType;
/// Ask the SDK to transmit the movement data saved by the SDK.
/// Usually this is not required as the SDK efficiently determines when to transmit the data.
+ (void)dispathEventsNow;
/// Register for callbacks to location updates
/// \param delegate A delegate which implements <code>LocationUpdateDelegate</code>. The SDK will call <code>locationUpdates(...)</code> when new locations are received from the <code>CLLocationManager</code>.
///
+ (void)setLocationUpdatesDelegate:(id <HTCoreServiceLocationUpdateDelegate> _Nullable)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("LocationUpdateDelegate")
@protocol HTCoreServiceLocationUpdateDelegate
- (void)locationUpdates:(NSArray<CLLocation *> * _Nonnull)locations;
@end

typedef SWIFT_ENUM(NSInteger, ServiceStatus, closed) {
  ServiceStatusStarted = 0,
  ServiceStatusStopped = 1,
};


SWIFT_PROTOCOL_NAMED("ServiceStatusUpdateDelegate")
@protocol HTCoreServiceStatusUpdateDelegate
- (void)serviceStatusUpdated:(enum ServiceType)serviceType status:(enum ServiceStatus)status;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
